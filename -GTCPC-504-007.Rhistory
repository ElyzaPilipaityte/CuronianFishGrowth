select(-periods) |>
as.list()
oagerng1 <- filter(oagerng,periods==grp)
## Make ages for predictions
ages <- seq(min(eagerng),max(eagerng),length.out=101)
## Fit von B to that group
fit1 <- nls(std_length~vb(age,Linf,K,t0),data=dat1,start=sv1)
## Extract the fitted parameters
fit_params <- summary(fit1)$coefficients
## Make data frame of predicted mean lengths at age with CIs
preds1 <- data.frame(periods=grp,
age=ages,
fit=investr::predFit(fit1,data.frame(age=ages),
interval=interval)) |>
mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
as.data.frame()
## Rename variables
names(preds1) <- c("periods","age","fit","lwr","upr","inrng")
## Return both predictions and the fitted parameters
list(preds = preds1, params = fit_params)
}
preds <- NULL
params_list <- list()
for (i in grps) {
result <- vbLOOP1(i, perch, svLKt, obsagerng, c(0, 20))
preds <- rbind(preds, result$preds)
params_list[[i]] <- result$params  # Store the parameters for each period
}
perch <- size_age_data %>% filter (spp_name_lt=="Eserys")
colSums(is.na(perch))
# Creating new column (year1) by subtracting fish age from the year when it was caught. It will show first fish year - the year the fish was born.
perch$year1 <- perch$year - perch$age
# Renaming column to year1 in temp dataset in order to combine it with perch data
names(temp)[names(temp) == "year"] <- "year1"
# Merging perch and temp dataset by year1 - just adding temp column which will show water temperature for first year of fish life
perch <- merge(perch, temp, by = "year1", all.x = TRUE)
# Creating new column for average temperature during all years of fish life
average_temp <- numeric(nrow(perch))
for (i in 1:nrow(perch)) {
years_subset <- temp$temp[temp$year1 >= perch[i, "year1"] & temp$year1 <= perch[i, "year"]]
average_temp[i] <- mean(years_subset, na.rm = TRUE)
}
perch$average_temp <- average_temp
# perch <- perch %>% drop_na(temp_year1)
# renaming columns to make it more clear
names(perch)[names(perch) == "temp"] <- "temp_year1"
names(perch)[names(perch) == "average_temp"] <- "temp_life"
tablep1 <- perch %>%
group_by(year, method) %>%
summarise(
median_length = median(std_length),
median_age = median(age), count_observation = n())
# scales and otholits data for age groups
tablep2<- perch %>%
group_by(age, method) %>%
summarise(count = n(), .groups = 'drop')  %>%
pivot_wider(names_from = method, values_from = count, values_fill = 0)
colSums(is.na(perch))
table(perch$age)
# removing ages which do not have both methods
perch1 <- perch %>% filter (age > 1 & age < 9) %>%  drop_na(season)
table(perch1$year)
perch1 <- perch1 %>% mutate(yearn = year - 1948)
table(perch1$yearn)
perch1$fage <- as.factor(perch1$age)
P1 <- lmer(total_length ~ age + temp_life + age * method + (1|season), data = perch1, REML = F)
P2p <- lmer(total_length ~ age * temp_life + age * method + (1|season), data = perch1, REML = F)
anova(P1, P2p)
P3 <- lmer(total_length ~ fage + temp_life + fage * method + (1|season), data = perch1, REML = F)
P4p <- lmer(total_length ~ fage * temp_life + fage * method + (1|season), data = perch1, REML = F)
anova(P3, P4p)
# Summarise neatly in a table
tab_model(P2p,
show.zeroinf = F,
dv.labels = c("Perch"),
string.pred = "Coefficient",
string.ci = "Conf. Int (95%)",
string.p = "P-value",
p.style = c("numeric"),
emph.p = FALSE,
transform = NULL)
sander <- size_age_data %>% filter (spp_name_lt=="Starkis")
colSums(is.na(sander))
# Creating new column (year1) by subtracting fish age from the year when it was caught. It will show first fish year - the year the fish was born.
sander$year1 <- sander$year - sander$age
# Renaming column to year1 in temp dataset in order to combine it with perch data
names(temp)[names(temp) == "year"] <- "year1"
# Merging perch and temp dataset by year1 - just adding temp column which will show water temperature for first year of fish life
sander <- merge(sander, temp, by = "year1", all.x = TRUE)
# Creating new column for average temperature during all years of fish life
average_temp <- numeric(nrow(sander))
for (i in 1:nrow(sander)) {
years_subset <- temp$temp[temp$year1 >= sander[i, "year1"] & temp$year1 <= sander[i, "year"]]
average_temp[i] <- mean(years_subset, na.rm = TRUE)
}
sander$average_temp <- average_temp
# renaming columns to make it more clear
names(sander)[names(sander) == "temp"] <- "temp_year1"
names(sander)[names(sander) == "average_temp"] <- "temp_life"
tables1 <- sander %>%
group_by(year, method) %>%
summarise(
median_length = median(std_length),
median_age = median(age), count_observation = n())
# scales and otholits data for age groups
tables2 <- sander %>%
group_by(age, method) %>%
summarise(count = n(), .groups = 'drop')  %>%
pivot_wider(names_from = method, values_from = count, values_fill = 0)
table(sander$age)
# including only those ages with both aging methods which are up to 6 years
sander1 <- sander %>% filter (age <= 5) %>% drop_na(season)
table(sander1$year)
colSums(is.na(sander1))
sander1$fage <- as.factor(sander1$age)
P1 <- lmer(std_length ~ age + temp_life + age * method  + (1|season), data = sander1, REML = F)
P2s <- lmer(std_length ~ age * temp_life + age * method + (1|season), data = sander1, REML = F)
anova(P1, P2s)
P3 <- lmer(std_length ~ fage + temp_life + fage * method  + (1|season), data = sander1, REML = F)
P4s <- lmer(std_length ~ fage * temp_life + fage * method + (1|season), data = sander1, REML = F)
anova(P3, P4s)
# Summarise neatly in a table
tab_model(P2s,
show.zeroinf = F,
dv.labels = c("Pikeperch"),
string.pred = "Coefficient",
string.ci = "Conf. Int (95%)",
string.p = "P-value",
p.style = c("numeric"),
emph.p = FALSE,
transform = NULL)
rm(list=ls())
library(tidyverse)
library(sjPlot)
library(cowplot)
library(Kendall)
library(EnvStats)
L50data <- read_csv(file = "L50_data.csv")
# Selecting only summer data to reduce bias in the analysis caused by the different sizes of fish during different seasons
# L50data <- L50data %>% filter (month == 6 | month == 7 | month == 8) %>% select(spp_name_lt, total_length, gonad_stage, year, month, sex_en)
# function for counting the length at which a certain percentage of fish are mature
lrPerc <- function(cf,p) (log(p/(1-p))-cf[[1]])/cf[[2]]
My_theme <- theme(
panel.background = element_blank(),
panel.border = element_rect(fill = NA, linewidth = 1),
strip.background = element_rect(fill = "white", color = "white", linewidth = 1),
text = element_text(size = 20, family = "gillsans"),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)
Bream1 <- L50data %>% filter (spp_name_lt=="Karsis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = Bream1)
summary(model)
cor(Bream1$total_length, Bream1$std_length, use = "complete.obs") # 0.988
# counting total length with regression coefficients and standard length
Bream1$total_length[is.na(Bream1$total_length)] <- 1.656 + (Bream1$std_length[is.na(Bream1$total_length)] * 1.186)
# Adding gonad stage 1 to smallest individuals which total length less than 10 and which has no gonad stage data.
Bream1 <- Bream1 %>% mutate(gonad_stage = ifelse(is.na(gonad_stage) & total_length < 10, "1", gonad_stage), gonad_stage = ifelse(gonad_stage == "2" & total_length > 50, NA, gonad_stage)) %>% drop_na(gonad_stage)
colSums(is.na(Bream1)) #now all data has total length
Bream1 <- Bream1 %>% select(spp_name_lt, total_length, gonad_stage, year, month, sex_en) %>% drop_na(total_length)
# Calculate the number of observations per year
year_counts_Bream1 <- Bream1 %>%
group_by(year) %>%
summarise(n = n())
# Filter the dataset to include only years with more than 10 observations
Bream1 <- Bream1 %>%
inner_join(year_counts_Bream1, by = "year") %>%
filter(n > 10) %>%
select(-n)
# Find unique years in the dataset
unique_years <- unique(Bream1$year)
# Create an empty dataframe to store the fictitious individuals
new_individuals <- data.frame()
# Loop through each unique year
for (year in unique_years) {
# Generate 30 fictitious individuals for the current year
new_data <- data.frame(
spp_name_lt = rep("Karsis", 30),
total_length = runif(30, min = 1, max = 15),
gonad_stage = rep("1", 30),
year = rep(year, 30),
month = rep(7, 30),
sex_en = rep(NA, 30)
)
# Append the new data to the new_individuals dataframe
new_individuals <- rbind(new_individuals, new_data)
}
# Combine the new individuals with the original dataset
Bream1 <- rbind(Bream1, new_individuals)
# Creating new column with binomial maturity data (0 - Immature, 1 - Mature)
Bream1 <- Bream1 %>%
mutate(maturity = as.factor(ifelse(gonad_stage < 3, 0, 1)))
Bream1 <- Bream1 |>
drop_na(year) |>
mutate(year = factor(year, levels = sort(unique(year))))
glm3 <- glm(maturity ~ total_length * year, data = Bream1, family=binomial)
car::Anova(glm3)
coef(glm3)
summary(glm3)
bcL3 <- car::Boot(glm3)
L50.50s = apply(bcL3$t[,1:2], 1, lrPerc, p = 0.5)
L50.51s = apply(bcL3$t[,1:2] + bcL3$t[,c(3, 32)], 1, lrPerc, p = 0.5)
L50.57s = apply(bcL3$t[,1:2] + bcL3$t[,c(4, 33)], 1, lrPerc, p = 0.5)
L50.58s = apply(bcL3$t[,1:2] + bcL3$t[,c(5, 34)], 1, lrPerc, p = 0.5)
L50.59s = apply(bcL3$t[,1:2] + bcL3$t[,c(6, 35)], 1, lrPerc, p = 0.5)
L50.60s = apply(bcL3$t[,1:2] + bcL3$t[,c(7, 36)], 1, lrPerc, p = 0.5)
L50.62s = apply(bcL3$t[,1:2] + bcL3$t[,c(8, 37)], 1, lrPerc, p = 0.5)
L50.66s = apply(bcL3$t[,1:2] + bcL3$t[,c(9, 38)], 1, lrPerc, p = 0.5)
L50.67s = apply(bcL3$t[,1:2] + bcL3$t[,c(10, 39)], 1, lrPerc, p = 0.5)
L50.68s = apply(bcL3$t[,1:2] + bcL3$t[,c(11, 40)], 1, lrPerc, p = 0.5)
L50.73s = apply(bcL3$t[,1:2] + bcL3$t[,c(12, 41)], 1, lrPerc, p = 0.5)
L50.74s = apply(bcL3$t[,1:2] + bcL3$t[,c(13, 42)], 1, lrPerc, p = 0.5)
L50.75s = apply(bcL3$t[,1:2] + bcL3$t[,c(14, 43)], 1, lrPerc, p = 0.5)
L50.76s = apply(bcL3$t[,1:2] + bcL3$t[,c(15, 44)], 1, lrPerc, p = 0.5)
L50.77s = apply(bcL3$t[,1:2] + bcL3$t[,c(16, 45)], 1, lrPerc, p = 0.5)
L50.78s = apply(bcL3$t[,1:2] + bcL3$t[,c(17, 46)], 1, lrPerc, p = 0.5)
L50.79s = apply(bcL3$t[,1:2] + bcL3$t[,c(18, 47)], 1, lrPerc, p = 0.5)
L50.84s = apply(bcL3$t[,1:2] + bcL3$t[,c(19, 48)], 1, lrPerc, p = 0.5)
L50.87s = apply(bcL3$t[,1:2] + bcL3$t[,c(20, 49)], 1, lrPerc, p = 0.5)
L50.88s = apply(bcL3$t[,1:2] + bcL3$t[,c(21, 50)], 1, lrPerc, p = 0.5)
L50.89s = apply(bcL3$t[,1:2] + bcL3$t[,c(22, 51)], 1, lrPerc, p = 0.5)
L50.90s = apply(bcL3$t[,1:2] + bcL3$t[,c(23, 52)], 1, lrPerc, p = 0.5)
L50.91s = apply(bcL3$t[,1:2] + bcL3$t[,c(24, 53)], 1, lrPerc, p = 0.5)
L50.92s = apply(bcL3$t[,1:2] + bcL3$t[,c(25, 54)], 1, lrPerc, p = 0.5)
L50.93s = apply(bcL3$t[,1:2] + bcL3$t[,c(26, 55)], 1, lrPerc, p = 0.5)
L50.95s = apply(bcL3$t[,1:2] + bcL3$t[,c(27, 56)], 1, lrPerc, p = 0.5)
L50.98s = apply(bcL3$t[,1:2] + bcL3$t[,c(28, 57)], 1, lrPerc, p = 0.5)
L50.99s = apply(bcL3$t[,1:2] + bcL3$t[,c(29, 58)], 1, lrPerc, p = 0.5)
L50.04s = apply(bcL3$t[,1:2] + bcL3$t[,c(30, 59)], 1, lrPerc, p = 0.5)
L50.06s = apply(bcL3$t[,1:2] + bcL3$t[,c(31, 60)], 1, lrPerc, p = 0.5)
( ci.L50.50s <-  quantile(L50.50s,c(0.025,0.975)) )
( ci.L50.51s <-  quantile(L50.51s,c(0.025,0.975)) )
( ci.L50.57s <-  quantile(L50.57s,c(0.025,0.975)) )
( ci.L50.58s <-  quantile(L50.58s,c(0.025,0.975)) )
( ci.L50.59s <-  quantile(L50.59s,c(0.025,0.975)) )
( ci.L50.60s <-  quantile(L50.60s,c(0.025,0.975)) )
( ci.L50.62s <-  quantile(L50.62s,c(0.025,0.975)) )
( ci.L50.66s <-  quantile(L50.66s,c(0.025,0.975)) )
( ci.L50.67s <-  quantile(L50.67s,c(0.025,0.975)) )
( ci.L50.68s <-  quantile(L50.68s,c(0.025,0.975)) )
( ci.L50.73s <-  quantile(L50.73s,c(0.025,0.975)) )
( ci.L50.74s <-  quantile(L50.74s,c(0.025,0.975)) )
( ci.L50.75s <-  quantile(L50.75s,c(0.025,0.975)) )
( ci.L50.76s <-  quantile(L50.76s,c(0.025,0.975)) )
( ci.L50.77s <-  quantile(L50.77s,c(0.025,0.975)) )
( ci.L50.78s <-  quantile(L50.78s,c(0.025,0.975)) )
( ci.L50.79s <-  quantile(L50.79s,c(0.025,0.975)) )
( ci.L50.84s <-  quantile(L50.84s,c(0.025,0.975)) )
( ci.L50.87s <-  quantile(L50.87s,c(0.025,0.975)) )
( ci.L50.88s <-  quantile(L50.88s,c(0.025,0.975)) )
( ci.L50.89s <-  quantile(L50.89s,c(0.025,0.975)) )
( ci.L50.90s <-  quantile(L50.90s,c(0.025,0.975)) )
( ci.L50.91s <-  quantile(L50.91s,c(0.025,0.975)) )
( ci.L50.92s <-  quantile(L50.92s,c(0.025,0.975)) )
( ci.L50.93s <-  quantile(L50.93s,c(0.025,0.975)) )
( ci.L50.95s <-  quantile(L50.95s,c(0.025,0.975)) )
( ci.L50.98s <-  quantile(L50.98s,c(0.025,0.975)) )
( ci.L50.99s <-  quantile(L50.99s,c(0.025,0.975)) )
( ci.L50.04s <-  quantile(L50.04s,c(0.025,0.975)) )
( ci.L50.06s <-  quantile(L50.06s,c(0.025,0.975)) )
# Maturity size -α/βi
predicted_L50.50s <- -(coef(glm3)[1] / coef(glm3)[2])
predicted_L50.51s <- -((coef(glm3)[1] + coef(glm3)[3]) / (coef(glm3)[2] + coef(glm3)[32]))
predicted_L50.57s <- -((coef(glm3)[1] + coef(glm3)[4]) / (coef(glm3)[2] + coef(glm3)[33]))
predicted_L50.58s <- -((coef(glm3)[1] + coef(glm3)[5]) / (coef(glm3)[2] + coef(glm3)[34]))
predicted_L50.59s <- -((coef(glm3)[1] + coef(glm3)[6]) / (coef(glm3)[2] + coef(glm3)[35]))
predicted_L50.60s <- -((coef(glm3)[1] + coef(glm3)[7]) / (coef(glm3)[2] + coef(glm3)[36]))
predicted_L50.62s <- -((coef(glm3)[1] + coef(glm3)[8]) / (coef(glm3)[2] + coef(glm3)[37]))
predicted_L50.66s <- -((coef(glm3)[1] + coef(glm3)[9]) / (coef(glm3)[2] + coef(glm3)[38]))
predicted_L50.67s <- -((coef(glm3)[1] + coef(glm3)[10]) / (coef(glm3)[2] + coef(glm3)[39]))
predicted_L50.68s <- -((coef(glm3)[1] + coef(glm3)[11]) / (coef(glm3)[2] + coef(glm3)[40]))
predicted_L50.73s <- -((coef(glm3)[1] + coef(glm3)[12]) / (coef(glm3)[2] + coef(glm3)[41]))
predicted_L50.74s <- -((coef(glm3)[1] + coef(glm3)[13]) / (coef(glm3)[2] + coef(glm3)[42]))
predicted_L50.75s <- -((coef(glm3)[1] + coef(glm3)[14]) / (coef(glm3)[2] + coef(glm3)[43]))
predicted_L50.76s <- -((coef(glm3)[1] + coef(glm3)[15]) / (coef(glm3)[2] + coef(glm3)[44]))
predicted_L50.77s <- -((coef(glm3)[1] + coef(glm3)[16]) / (coef(glm3)[2] + coef(glm3)[45]))
predicted_L50.78s <- -((coef(glm3)[1] + coef(glm3)[17]) / (coef(glm3)[2] + coef(glm3)[46]))
predicted_L50.79s <- -((coef(glm3)[1] + coef(glm3)[18]) / (coef(glm3)[2] + coef(glm3)[47]))
predicted_L50.84s <- -((coef(glm3)[1] + coef(glm3)[19]) / (coef(glm3)[2] + coef(glm3)[48]))
predicted_L50.87s <- -((coef(glm3)[1] + coef(glm3)[20]) / (coef(glm3)[2] + coef(glm3)[49]))
predicted_L50.88s <- -((coef(glm3)[1] + coef(glm3)[21]) / (coef(glm3)[2] + coef(glm3)[50]))
predicted_L50.89s <- -((coef(glm3)[1] + coef(glm3)[22]) / (coef(glm3)[2] + coef(glm3)[51]))
predicted_L50.90s <- -((coef(glm3)[1] + coef(glm3)[23]) / (coef(glm3)[2] + coef(glm3)[52]))
predicted_L50.91s <- -((coef(glm3)[1] + coef(glm3)[24]) / (coef(glm3)[2] + coef(glm3)[53]))
predicted_L50.92s <- -((coef(glm3)[1] + coef(glm3)[25]) / (coef(glm3)[2] + coef(glm3)[54]))
predicted_L50.93s <- -((coef(glm3)[1] + coef(glm3)[26]) / (coef(glm3)[2] + coef(glm3)[55]))
predicted_L50.95s <- -((coef(glm3)[1] + coef(glm3)[27]) / (coef(glm3)[2] + coef(glm3)[56]))
predicted_L50.98s <- -((coef(glm3)[1] + coef(glm3)[28]) / (coef(glm3)[2] + coef(glm3)[57]))
predicted_L50.99s <- -((coef(glm3)[1] + coef(glm3)[29]) / (coef(glm3)[2] + coef(glm3)[58]))
predicted_L50.04s <- -((coef(glm3)[1] + coef(glm3)[30]) / (coef(glm3)[2] + coef(glm3)[59]))
predicted_L50.06s <- -((coef(glm3)[1] + coef(glm3)[31]) / (coef(glm3)[2] + coef(glm3)[60]))
year <- c("1950", "1951", "1957", "1958", "1959", "1960", "1962", "1966", "1967", "1968", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1984", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1995", "1998", "1999", "2004", "2006")
predicted_values <- c(predicted_L50.50s, predicted_L50.51s, predicted_L50.57s, predicted_L50.58s, predicted_L50.59s, predicted_L50.60s, predicted_L50.62s, predicted_L50.66s, predicted_L50.67s, predicted_L50.68s, predicted_L50.73s, predicted_L50.74s, predicted_L50.75s, predicted_L50.76s, predicted_L50.77s, predicted_L50.78s, predicted_L50.79s, predicted_L50.84s, predicted_L50.87s, predicted_L50.88s, predicted_L50.89s, predicted_L50.90s, predicted_L50.91s, predicted_L50.92s, predicted_L50.93s, predicted_L50.95s, predicted_L50.98s, predicted_L50.99s, predicted_L50.04s, predicted_L50.06s)
lower_ci <- c(ci.L50.50s[1], ci.L50.51s[1], ci.L50.57s[1], ci.L50.58s[1], ci.L50.59s[1], ci.L50.60s[1], ci.L50.62s[1], ci.L50.66s[1], ci.L50.67s[1], ci.L50.68s[1], ci.L50.73s[1], ci.L50.74s[1], ci.L50.75s[1], ci.L50.76s[1], ci.L50.77s[1], ci.L50.78s[1], ci.L50.79s[1], ci.L50.84s[1], ci.L50.87s[1], ci.L50.88s[1], ci.L50.89s[1], ci.L50.90s[1], ci.L50.91s[1], ci.L50.92s[1], ci.L50.93s[1], ci.L50.95s[1], ci.L50.98s[1], ci.L50.99s[1], ci.L50.04s[1], ci.L50.06s[1])
upper_ci <- c(ci.L50.50s[2], ci.L50.51s[2], ci.L50.57s[2], ci.L50.58s[2], ci.L50.59s[2], ci.L50.60s[2], ci.L50.62s[2], ci.L50.66s[2], ci.L50.67s[2], ci.L50.68s[2], ci.L50.73s[2], ci.L50.74s[2], ci.L50.75s[2], ci.L50.76s[2], ci.L50.77s[2], ci.L50.78s[2], ci.L50.79s[2], ci.L50.84s[2], ci.L50.87s[2], ci.L50.88s[2], ci.L50.89s[2], ci.L50.90s[2], ci.L50.91s[2], ci.L50.92s[2], ci.L50.93s[2], ci.L50.95s[2], ci.L50.98s[2], ci.L50.99s[2], ci.L50.04s[2], ci.L50.06s[2])
breamMatSize <- data.frame(year, predicted_values, lower_ci, upper_ci)
# Define colors for different years
clrs <- c("black", "red", "blue", "green", "purple", "pink")
# Convert year to a factor
breamMatSize$year <- as.factor(breamMatSize$year)
# Define range of lengths for predictions
lens <- seq(4, 60, length.out = 100)
# Fit logistic regression models for different years
predictions <- breamMatSize %>%
group_by(year) %>%
do(model = glm((as.numeric(maturity) - 1) ~ total_length,
family = binomial, data = .)) %>%
rowwise() %>%
mutate(predicted = list(predict(model,
newdata = data.frame(total_length = lens),
type = "response")))
str(breamMatSize)
Breamt_table <- Bream1 %>%
group_by(year, maturity) %>%
summarise(
mean_total_length = mean(total_length),
median_total_length = median(total_length),
min_total_length = min(total_length),
max_total_length = max(total_length), count_observation = n())
View(Breamt_table)
breamMatSize <- data.frame(year, predicted_values, lower_ci, upper_ci, maturity)
# Create a sequence of total lengths for prediction
total_length_seq <- seq(min(Bream1$total_length), max(Bream1$total_length), length.out = 100)
# Create a dataframe to store predictions
prediction_data <- expand.grid(total_length = total_length_seq, year = unique(Bream1$year))
# Predict maturity probabilities using the logistic model
prediction_data$predicted_maturity <- predict(glm3, newdata = prediction_data, type = "response")
# Plot logistic regression curves
ggplot(prediction_data, aes(x = total_length, y = predicted_maturity, color = year)) +
geom_line() +
labs(title = "Logistic Regression Curves for Maturity by Year",
x = "Total Length (cm)", y = "Probability of Maturity") +
theme_minimal()
# Plot logistic regression curves
ggplot(prediction_data, aes(x = total_length, y = predicted_maturity, color = year)) +
geom_line() +
labs(title = "Logistic Regression Curves for Maturity by Year",
x = "Total Length (cm)", y = "Probability of Maturity") +
theme_minimal()
clrs1 <- c("black", "red", "blue", "green", "purple", "pink")
clrs2 <- sapply(clrs1, function(col) adjustcolor(col, alpha.f = 1/6))
# Get levels of "era"
lvls <- levels(Bream1$era)
# Create sequence of total lengths
lens <- seq(4, 60, length.out = 99)
# Predict values for each era
predicted_probs <- lapply(lvls, function(era) {
predict(glm3, type = "response", newdata = data.frame(total_length = lens, era = factor(era, levels = lvls)))
})
# Plot the base scatter plot with first era
plot((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, era == lvls[1]),
pch = 19, col = clrs2[1], xlab = "Total Length (cm)", ylab = "Proportion Mature",
ylim = c(0, 1))
# Add points for other eras
for (i in 2:length(lvls)) {
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, era == lvls[i]),
pch = 19, col = clrs2[i])
}
# Add fitted logistic regression curves
for (i in 1:length(lvls)) {
lines(lens, predicted_probs[[i]], lwd = 2, col = clrs1[i])
}
# Add legend
legend("topleft", legend = lvls, col = clrs1, lty = 1, lwd = 2, pch = 19,
title = "Era", cex = 0.8)
## Set-up colors
clrs1 <- c("black","red")
clrs2 <- col2rgbt(clrs1,1/5)
## Get predicted values for each era
lvls <- levels(Bream1$year)
lens <- seq(30,70,length.out=99)
pa02 <- predict(glm3,type="response",
data.frame(length=lens,year=factor("1950",levels=lvls)))
View(Bream1)
Bream1 <- Bream1 |>
mutate(lcat2=FSA::lencat(length,w=2))
View(Bream1)
Bream1 <- Bream1 |>
mutate(lcat2=FSA::lencat(total_length,w=2))
FSA::headtail(Bream1)
freq <- xtabs(~lcat2+maturity,data=Bream1)
props <- prop.table(freq,margin=1)
round(props,3)   # for display only
plot(props[,"Mature"]~as.numeric(rownames(props)),pch=19,
xlab="Total Length (cm)",ylab="Proportion Mature")
plot(props[,"1"]~as.numeric(rownames(props)),pch=19,
xlab="Total Length (cm)",ylab="Proportion Mature")
plot((as.numeric(maturity)-1)~length,data=Bream1,
pch=19,col=rgb(0,0,0,1/8),
xlab="Total Length (cm)",ylab="Proportion Mature")
View(Bream1)
plot((as.numeric(maturity)-1)~total_length,data=Bream1,
pch=19,col=rgb(0,0,0,1/8),
xlab="Total Length (cm)",ylab="Proportion Mature")
points(props[,"Mature"]~as.numeric(rownames(props)),pch=3)
points(props[,"1"]~as.numeric(rownames(props)),pch=3)
lens <- seq(30,70,length.out=199)
preds <- predict(glm3,data.frame(length=lens),type="response")
preds <- predict(glm3,data.frame(total_length=lens),type="response")
lines(preds~lens,lwd=2)
lens <- seq(0,60,length.out=199)
preds <- predict(glm3,data.frame(total_length=lens),type="response")
lines(c(0,L50),c(0.5,0.5),lty=2,lwd=2,col="red")
lines(c(0,L50.50s),c(0.5,0.5),lty=2,lwd=2,col="red")
lines(c(L50.50s,L50.50s),c(-0.2,0.5),lty=2,lwd=2,col="red")
levels(Bream1$years)
levels(Bream1$year)
## Set-up colors
clrs1 <- c("black","red")
clrs2 <- col2rgbt(clrs1,1/5)
clrs2 <- clrs1
## Get predicted values for each era
lvls <- levels(Bream1$year)
lens <- seq(0,60,length.out=99)
pa02 <- predict(glm3,type="response",
data.frame(total_length=lens,year=factor("1950",levels=lvls)))
pp02 <- predict(glm3,type="response",
data.frame(total_length=lens,era=factor("1957",levels=lvls)))
pp02 <- predict(glm3,type="response",
data.frame(total_length=lens,era=factor("1951",levels=lvls)))
pp02 <- predict(glm3,type="response",
data.frame(total_length=lens,year=factor("1951",levels=lvls)))
## Make the base plot
plot((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[1]),
pch=19,col=clrs2[1],xlab="Total Length (cm)",ylab="Proportion Mature")
points((as.numeric(maturity)-1)~total_length,data=filter(df,year==lvls[2]),
pch=19,col=clrs2[2])
points((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[2]),
pch=19,col=clrs2[2])
## Add the two fitted lines
lines(pa02~lens,lwd=2,col=clrs1[1])
lines(pp02~lens,lwd=2,col=clrs1[2])
pa02 <- predict(glm3,type="response",
data.frame(total_length=lens,year=factor("1957",levels=lvls)))
pp02 <- predict(glm3,type="response",
data.frame(total_length=lens,year=factor("1958",levels=lvls)))
## Make the base plot
plot((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[3]),
pch=19,col=clrs2[1],xlab="Total Length (cm)",ylab="Proportion Mature")
points((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[4]),
pch=19,col=clrs2[2])
## Add the two fitted lines
lines(pa02~lens,lwd=2,col=clrs1[1])
lines(pp02~lens,lwd=2,col=clrs1[2])
pa02
pp02
pa02 <- predicted_L50.50s
pp02 <- predicted_L50.51s
## Make the base plot
plot((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[3]),
pch=19,col=clrs2[1],xlab="Total Length (cm)",ylab="Proportion Mature")
points((as.numeric(maturity)-1)~total_length,data=filter(Bream1,year==lvls[4]),
pch=19,col=clrs2[2])
## Add the two fitted lines
lines(pa02~lens,lwd=2,col=clrs1[1])
lines(pp02~lens,lwd=2,col=clrs1[2])
# Get predicted values for each era
lvls <- levels(Bream1$year)
lens <- seq(4, 60, length.out = 99)
pa02 <- predict(glm3, type = "response", data.frame(total_length = lens, year = factor("1950", levels = lvls)))
# Make the base plot
plot((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[1]),
pch = 19, col = clrs2[1], xlab = "Total Length (cm)", ylab = "Proportion Mature")
# Add the fitted lines for all eras
lines(pa02 ~ lens, lwd = 2, col = clrs1[1])
lines(pp02 ~ lens, lwd = 2, col = clrs1[2])
# Set-up colors for plotting
clrs1 <- c("black", "red", "blue", "green", "purple", "pink") # colors for lines
clrs2 <- col2rgb(clrs1) / 255  # colors for points
# Get predicted values for each era (no confidence intervals)
lvls <- levels(Bream1$year)
lens <- seq(4, 60, length.out = 99)
# Predict for each era
pa02 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("1950", levels = lvls)))
pp02 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("1961-1970", levels = lvls)))
pi02 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("1971-1980", levels = lvls)))
pi03 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("1981-1990", levels = lvls)))
pi04 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("1991-2000", levels = lvls)))
pi05 <- predict(glm3, type = "response", newdata = data.frame(total_length = lens, year = factor("2000-2010", levels = lvls)))
# Base plot with data points for each era
plot((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[1]),
pch = 19, col = clrs2[1], xlab = "Total Length (cm)", ylab = "Proportion Mature",
xlim = c(4, 60), ylim = c(0, 1))  # Adjust axis limits
# Add points for each era
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[2]), pch = 19, col = clrs2[2])
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[3]), pch = 19, col = clrs2[3])
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[4]), pch = 19, col = clrs2[4])
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[5]), pch = 19, col = clrs2[5])
points((as.numeric(maturity) - 1) ~ total_length, data = filter(Bream1, year == lvls[6]), pch = 19, col = clrs2[6])
# Add fitted lines for all eras (no confidence intervals)
lines(pa02 ~ lens, lwd = 2, col = clrs1[1])
lines(pp02 ~ lens, lwd = 2, col = clrs1[2])
lines(pi02 ~ lens, lwd = 2, col = clrs1[3])
lines(pi03 ~ lens, lwd = 2, col = clrs1[4])
lines(pi04 ~ lens, lwd = 2, col = clrs1[5])
lines(pi05 ~ lens, lwd = 2, col = clrs1[6])
# Add a legend to the plot
legend("topleft", legend = lvls, col = clrs1, lty = 1, lwd = 2, pch = 19,
title = "Era", cex = 0.8)
View(Bream1)
table(Bream1$year)
Bream0 <- Bream1 %>% filter(year == "1991")
lrPerc <- function(cf,p) (log(p/(1-p))-cf[[1]])/cf[[2]]
( L50 <- lrPerc(coef(glm1),0.5) )
glm1 <- glm(maturity~length,data=Bream0,family=binomial)
glm1 <- glm(maturity~total_length,data=Bream0,family=binomial)
( L50 <- lrPerc(coef(glm1),0.5) )
Bream0 <- Bream1 %>% filter(year == "1992")
lrPerc <- function(cf,p) (log(p/(1-p))-cf[[1]])/cf[[2]]
glm1 <- glm(maturity~total_length,data=Bream0,family=binomial)
( L50 <- lrPerc(coef(glm1),0.5) )
