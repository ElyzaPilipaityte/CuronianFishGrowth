#              Estimate Std. Error t value Pr(>|t|)
# (Intercept) 503.62714  152.74709   3.297  0.00711 **
# year         -0.24264    0.07687  -3.156  0.00914 **
base_plot <- plot_model(wt_gaus1, type = "pred",
terms = c("year"),
colors = c("black"),
show.data = TRUE,
title = "Perch",
jitter = 0.1,
axis.title = c("Year",
"Length at maturity (cm)"),
show.legend = FALSE, dot.size = 1.5)
# Significant negative relationship
p_value <- 0.009
# Extract the plot data from plot_model
plot_data <- base_plot$data
# Combine plot data with perchMat for matching
combined_data <- merge(plot_data, perchMat, by.x = "x", by.y = "year")
# Add confidence intervals and customize the plot
p <- base_plot +
geom_errorbar(data = combined_data, aes(x = x, ymin = lower_ci, ymax = upper_ci), width = 0.3, size = 0.5, color = "black", alpha = 0.6) +
annotate("text", x = Inf, y = Inf, label = paste0("p = ", format(p_value, digits = 4)),
hjust = 1.2, vjust = 2, size = 5) + expand_limits(y = 0) +
My_theme
# Print the final plot
print(p)
new_year <- data.frame(year = 1992)
pred_1992 <- predict(wt_gaus1, newdata = new_year, interval = "confidence", level = 0.95)
print(pred_1992)
new_year <- data.frame(year = 1990)
pred_1992 <- predict(wt_gaus1, newdata = new_year, interval = "confidence", level = 0.95)
print(pred_1992)
zander <- L50data %>% filter (spp_name_lt=="Starkis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = zander)
summary(model)
cor(zander$total_length, zander$std_length, use = "complete.obs") # 0.995
# counting total length with regression coefficients and standard length
zander$total_length[is.na(zander$total_length)] <- 1.056 + (zander$std_length[is.na(zander$total_length)] * 1.125)
# Adding gonad stage 1 to smallest individuals which total length less than 10 and which has no gonad stage data.
zander <- zander %>% mutate(gonad_stage = ifelse(is.na(gonad_stage) & total_length < 10, "1", gonad_stage), gonad_stage = ifelse(gonad_stage == "2" & total_length > 50, NA, gonad_stage)) %>% drop_na(gonad_stage)
colSums(is.na(zander)) #now all data has total length
zander <- zander %>% select(spp_name_lt, total_length, gonad_stage, year, month, sex_en)
# Calculate the number of observations per year in zander
year_counts_zander <- zander %>%
group_by(year) %>%
summarise(n = n())
# Filter the zander dataset to include only years with more than 15 observations
zander <- zander %>%
inner_join(year_counts_zander, by = "year") %>%
filter(n > 10) %>%
select(-n)
# Find unique years in the zander dataset
unique_years <- unique(zander$year)
# Create an empty dataframe to store the fictitious individuals
new_individuals <- data.frame()
# Loop through each unique year
for (year in unique_years) {
# Generate 30 fictitious individuals for the current year
new_data <- data.frame(
spp_name_lt = rep("Starkis", 30),
total_length = runif(30, min = 1, max = 15),
gonad_stage = rep("1", 30),
year = rep(year, 30),
month = rep(7, 30),
sex_en = rep(NA, 30)
)
# Append the new data to the new_individuals dataframe
new_individuals <- rbind(new_individuals, new_data)
}
# Combine the new individuals with the original zander dataset
zander <- rbind(zander, new_individuals)
# Creating new column with binomial maturity data (0 - Immature, 1 - Mature)
zander <- zander %>%
mutate(maturity = as.factor(ifelse(gonad_stage < 3, 0, 1)))
zander <- zander |>
drop_na(year) |>
mutate(year = factor(year, levels = sort(unique(year))))
glm3 <- glm(maturity ~ total_length * year, data = zander, family=binomial)
car::Anova(glm3)
coef(glm3)
summary(glm3)
bcL3 <- car::Boot(glm3)
L50.51s = apply(bcL3$t[,1:2], 1, lrPerc, p = 0.5)
L50.60s = apply(bcL3$t[,1:2] + bcL3$t[,c(3, 20)], 1, lrPerc, p = 0.5)
L50.62s = apply(bcL3$t[,1:2] + bcL3$t[,c(4, 21)], 1, lrPerc, p = 0.5)
L50.66s = apply(bcL3$t[,1:2] + bcL3$t[,c(5, 22)], 1, lrPerc, p = 0.5)
L50.67s = apply(bcL3$t[,1:2] + bcL3$t[,c(6, 23)], 1, lrPerc, p = 0.5)
L50.68s = apply(bcL3$t[,1:2] + bcL3$t[,c(7, 24)], 1, lrPerc, p = 0.5)
L50.73s = apply(bcL3$t[,1:2] + bcL3$t[,c(8, 25)], 1, lrPerc, p = 0.5)
L50.77s = apply(bcL3$t[,1:2] + bcL3$t[,c(9, 26)], 1, lrPerc, p = 0.5)
L50.79s = apply(bcL3$t[,1:2] + bcL3$t[,c(10, 27)], 1, lrPerc, p = 0.5)
L50.80s = apply(bcL3$t[,1:2] + bcL3$t[,c(11, 28)], 1, lrPerc, p = 0.5)
L50.81s = apply(bcL3$t[,1:2] + bcL3$t[,c(12, 29)], 1, lrPerc, p = 0.5)
L50.88s = apply(bcL3$t[,1:2] + bcL3$t[,c(13, 30)], 1, lrPerc, p = 0.5)
L50.89s = apply(bcL3$t[,1:2] + bcL3$t[,c(14, 31)], 1, lrPerc, p = 0.5)
L50.92s = apply(bcL3$t[,1:2] + bcL3$t[,c(15, 32)], 1, lrPerc, p = 0.5)
L50.96s = apply(bcL3$t[,1:2] + bcL3$t[,c(16, 33)], 1, lrPerc, p = 0.5)
L50.98s = apply(bcL3$t[,1:2] + bcL3$t[,c(17, 34)], 1, lrPerc, p = 0.5)
L50.99s = apply(bcL3$t[,1:2] + bcL3$t[,c(18, 35)], 1, lrPerc, p = 0.5)
L50.02s = apply(bcL3$t[,1:2] + bcL3$t[,c(19, 36)], 1, lrPerc, p = 0.5)
( ci.L50.51s <-  quantile(L50.51s,c(0.025,0.975)) )
( ci.L50.60s <-  quantile(L50.60s,c(0.025,0.975)) )
( ci.L50.62s <-  quantile(L50.62s,c(0.025,0.975)) )
( ci.L50.66s <-  quantile(L50.66s,c(0.025,0.975)) )
( ci.L50.67s <-  quantile(L50.67s,c(0.025,0.975)) )
( ci.L50.68s <-  quantile(L50.68s,c(0.025,0.975)) )
( ci.L50.73s <-  quantile(L50.73s,c(0.025,0.975)) )
( ci.L50.77s <-  quantile(L50.77s,c(0.025,0.975)) )
( ci.L50.79s <-  quantile(L50.79s,c(0.025,0.975)) )
( ci.L50.80s <-  quantile(L50.80s,c(0.025,0.975)) )
( ci.L50.81s <-  quantile(L50.81s,c(0.025,0.975)) )
( ci.L50.88s <-  quantile(L50.88s,c(0.025,0.975)) )
( ci.L50.89s <-  quantile(L50.89s,c(0.025,0.975)) )
( ci.L50.92s <-  quantile(L50.92s,c(0.025,0.975)) )
( ci.L50.96s <-  quantile(L50.96s,c(0.025,0.975)) )
( ci.L50.98s <-  quantile(L50.98s,c(0.025,0.975)) )
( ci.L50.99s <-  quantile(L50.99s,c(0.025,0.975)) )
( ci.L50.02s <-  quantile(L50.02s,c(0.025,0.975)) )
# Maturity size -α/βi
predicted_L50.51s <- -(coef(glm3)[1] / coef(glm3)[2])
predicted_L50.60s <- -((coef(glm3)[1] + coef(glm3)[3]) / (coef(glm3)[2] + coef(glm3)[20]))
predicted_L50.62s <- -((coef(glm3)[1] + coef(glm3)[4]) / (coef(glm3)[2] + coef(glm3)[21]))
predicted_L50.66s <- -((coef(glm3)[1] + coef(glm3)[5]) / (coef(glm3)[2] + coef(glm3)[22]))
predicted_L50.67s <- -((coef(glm3)[1] + coef(glm3)[6]) / (coef(glm3)[2] + coef(glm3)[23]))
predicted_L50.68s <- -((coef(glm3)[1] + coef(glm3)[7]) / (coef(glm3)[2] + coef(glm3)[24]))
predicted_L50.73s <- -((coef(glm3)[1] + coef(glm3)[8]) / (coef(glm3)[2] + coef(glm3)[25]))
predicted_L50.77s <- -((coef(glm3)[1] + coef(glm3)[9]) / (coef(glm3)[2] + coef(glm3)[26]))
predicted_L50.79s <- -((coef(glm3)[1] + coef(glm3)[10]) / (coef(glm3)[2] + coef(glm3)[27]))
predicted_L50.80s <- -((coef(glm3)[1] + coef(glm3)[11]) / (coef(glm3)[2] + coef(glm3)[28]))
predicted_L50.81s <- -((coef(glm3)[1] + coef(glm3)[12]) / (coef(glm3)[2] + coef(glm3)[29]))
predicted_L50.88s <- -((coef(glm3)[1] + coef(glm3)[13]) / (coef(glm3)[2] + coef(glm3)[30]))
predicted_L50.89s <- -((coef(glm3)[1] + coef(glm3)[14]) / (coef(glm3)[2] + coef(glm3)[31]))
predicted_L50.92s <- -((coef(glm3)[1] + coef(glm3)[15]) / (coef(glm3)[2] + coef(glm3)[32]))
predicted_L50.96s <- -((coef(glm3)[1] + coef(glm3)[16]) / (coef(glm3)[2] + coef(glm3)[33]))
predicted_L50.98s <- -((coef(glm3)[1] + coef(glm3)[17]) / (coef(glm3)[2] + coef(glm3)[34]))
predicted_L50.99s <- -((coef(glm3)[1] + coef(glm3)[18]) / (coef(glm3)[2] + coef(glm3)[35]))
predicted_L50.02s <- -((coef(glm3)[1] + coef(glm3)[19]) / (coef(glm3)[2] + coef(glm3)[36]))
year <- c("1951", "1960", "1962", "1966", "1967", "1968", "1973", "1977", "1979", "1980", "1981", "1988", "1989", "1992", "1996", "1998", "1999", "2002")
predicted_values <- c(predicted_L50.51s, predicted_L50.60s,  predicted_L50.62s, predicted_L50.66s, predicted_L50.67s, predicted_L50.68s, predicted_L50.73s, predicted_L50.77s, predicted_L50.79s, predicted_L50.80s, predicted_L50.81s, predicted_L50.88s, predicted_L50.89s, predicted_L50.92s, predicted_L50.96s, predicted_L50.98s, predicted_L50.99s, predicted_L50.02s)
lower_ci <- c(ci.L50.51s[1], ci.L50.60s[1], ci.L50.62s[1], ci.L50.66s[1], ci.L50.67s[1], ci.L50.68s[1], ci.L50.73s[1], ci.L50.77s[1], ci.L50.79s[1], ci.L50.80s[1], ci.L50.81s[1], ci.L50.88s[1], ci.L50.89s[1], ci.L50.92s[1], ci.L50.96s[1], ci.L50.98s[1], ci.L50.99s[1], ci.L50.02s[1])
upper_ci <- c(ci.L50.51s[2], ci.L50.60s[2], ci.L50.62s[2], ci.L50.66s[2], ci.L50.67s[2], ci.L50.68s[2], ci.L50.73s[2], ci.L50.77s[2], ci.L50.79s[2], ci.L50.80s[2], ci.L50.81s[2], ci.L50.88s[2], ci.L50.89s[2], ci.L50.92s[2], ci.L50.96s[2], ci.L50.98s[2], ci.L50.99s[2], ci.L50.02s[2])
sanderMatSize <- data.frame(year, predicted_values, lower_ci, upper_ci)
zander_table2 <- zander %>%
group_by(year, maturity) %>%
summarise(
mean_total_length = mean(total_length),
median_total_length = median(total_length),
min_total_length = min(total_length),
max_total_length = max(total_length), count_observation = n())
zander_table <- zander %>%
count(maturity, year) %>% pivot_wider(names_from = maturity, values_from = n, values_fill = 0)
str(sanderMatSize, vec.len = 2)
sanderMatSize$year <- as.numeric(sanderMatSize$year)
# Remove rows where predicted_values are higher than 100 or lower than 3
# Excluding years which have 1 or less mature fish data
sanderMat <- slice(sanderMatSize, -3, -4, -5, -7, -14, -18)
sanderMat2 <- select(sanderMat, predicted_values)
ABtimeseries <- ts(sanderMat2)
#Plot the time series data
plot(ABtimeseries)
#Add a smooth line to visualize the trend
lines(lowess(time(ABtimeseries),ABtimeseries), col='red')
# Kendall's Nonparametric Test for Montonic Trend
kendallTrendTest(predicted_values ~ year, data = sanderMat)
# tau =  -0.4545455
# z = -1.988604
# P-value: 0.04674494
# There is a significant negative trend in the data
# (i.e. size at maturity has significantly declined since 1950)
# Weighted regression
# Fit a Gaussian LM
gaus1 <- lm(predicted_values ~ year, data = sanderMat)
# Extract weights for each year based on model residuals
weighting <- 1 / lm(abs(gaus1$residuals) ~ gaus1$fitted.values)$fitted.values^2
# Fit a weighted Gaussian LM
wt_gaus1 <- lm(predicted_values ~ year,
weights = weighting,
data = sanderMat)
#Model output
summary(wt_gaus1)
#              Estimate Std. Error t value Pr(>|t|)
# (Intercept) 967.6895   245.8366   3.936  0.00279 **
# year         -0.4678     0.1237  -3.783  0.00359 **
# negative relationship
p_value <- 0.004
# Plot model
base_plot <- plot_model(wt_gaus1, type = "pred",
terms = c("year"),
colors = c("black"),
show.data = TRUE,
title = "Pikeperch",
jitter = 0.1,
axis.title = c("Year", "Size at maturity (cm)"),
show.legend = FALSE, dot.size = 1.5)
# Extract the plot data from plot_model
plot_data <- base_plot$data
# Combine plot data with sanderMat for matching
combined_data <- merge(plot_data, sanderMat, by.x = "x", by.y = "year")
specific_years <- c(1960, 1980, 2000)
# Add confidence intervals and customize the plot
PP <- base_plot +
geom_errorbar(data = combined_data, aes(x = x, ymin = lower_ci, ymax = upper_ci), width = 0.3, size = 0.5, color = "black", alpha = 0.6) +
annotate("text", x = Inf, y = Inf, label = paste0("p = ", format(p_value, digits = 4)),
hjust = 1.2, vjust = 2, size = 5)+ scale_x_continuous(breaks = specific_years) + expand_limits(y = 0) +
My_theme
# Print the final plot
print(PP)
new_year <- data.frame(year = 1990)
pred_1992 <- predict(wt_gaus1, newdata = new_year, interval = "confidence", level = 0.95)
print(pred_1992)
new_year <- data.frame(year = 1992)
pred_1992 <- predict(wt_gaus1, newdata = new_year, interval = "confidence", level = 0.95)
print(pred_1992)
rm(list=ls())
library(tidyverse)
library(car)
# library(dplyr)
library(ggplot2)
library(lme4)
# install.packages("sjPlot")
library(sjPlot)
library(GGally)
library(DHARMa)
temp <- read_csv(file = "temp.csv")
size_age_data <- read_csv(file = "size_at_age.csv")
bream <- size_age_data %>% filter (spp_name_lt=="Karsis")
colSums(is.na(bream))
# Creating new column (year1) by subtracting fish age from the year when it was caught. It will show first fish year - the year the fish was born.
bream$year1 <- bream$year - bream$age
# Renaming column to year1 in temp dataset in order to combine it with perch data
names(temp)[names(temp) == "year"] <- "year1"
# Merging perch and temp dataset by year1 - just adding temp column which will show water temperature for first year of fish life
bream <- merge(bream, temp, by = "year1", all.x = TRUE)
# Creating new column for average temperature during all years of fish life
average_temp <- numeric(nrow(bream))
for (i in 1:nrow(bream)) {
years_subset <- temp$temp[temp$year1 >= bream[i, "year1"] & temp$year1 <= bream[i, "year"]]
average_temp[i] <- mean(years_subset, na.rm = TRUE)
}
bream$average_temp <- average_temp
# renaming columns to make it more clear
names(bream)[names(bream) == "temp"] <- "temp_year1"
names(bream)[names(bream) == "average_temp"] <- "temp_life"
tableb1<- bream %>%
group_by(year, method) %>%
summarise(
median_length = median(std_length),
median_age = median(age), count_observation = n())
# scales and otholits data for age groups
tableb2<- bream %>%
group_by(age, method) %>%
summarise(count = n(), .groups = 'drop')  %>%
pivot_wider(names_from = method, values_from = count, values_fill = 0)
colSums(is.na(bream))
table(bream$age)
# removing ages which do not have both methods
bream1 <- bream %>% filter (age > 2 & age <= 16 & age != 5) %>% drop_na (season) %>% filter (std_length<55)
# making one group of ages between 11 to 16 years
bream1 <- bream1 %>%
mutate(age = ifelse(age > 11, 12, age))
table(bream1$year)
bream1 <- bream1 %>% mutate(yearn = year - 1948)
table(bream1$method)
bream1$fage <- as.factor(bream1$age)
ggplot(data = bream1) +
geom_point(mapping = aes(x = age, y = std_length, color=as.factor(year)), position = "jitter", size = 2)
# no outliers
# Frequency plots
par(mfrow = c(1,2), mar = c(4,5,2,3), cex.lab = 1)
hist(bream1$std_length,  xlab = "Length (cm)",
col = "lightblue", border = "black", main = "")
hist((bream1$age),  xlab = "Age",
col = "red", border = "black",  main = "")
table(bream1$season)
Coll_b <- c("std_length", "age", "temp_life", "method", "season")
# Obtain summary using the ggpairs command from the GGally library
ggpairs(bream1[ ,Coll_b], ggplot2::aes(alpha = 0.8, colour = season))
# No obvious collinearity
#Calculate Variance Inflation Factor (VIF)
round(vif(lm(std_length ~ age + temp_life + method + season,
data = bream1)),2)
# Interaction? Plot data
ggplot(bream1, aes(x = age, y = (std_length), color = season)) +
geom_point(shape = 16, size = 2, alpha = 0.7, position = "jitter") +
geom_smooth(method = 'lm', colour = 'red', se = FALSE, size = 1.5) +
xlab("Age") + ylab("Length (cm)") +
facet_wrap(~method)
ggplot(bream1, aes(x = temp_life, y = (std_length), color = season)) +
geom_point(shape = 16, size = 2, alpha = 0.7, position = "jitter") +
geom_smooth(method = 'lm', colour = 'red', se = FALSE, size = 1.5) +
xlab("temperature1") + ylab("Length (cm)") +
facet_wrap(~method)
P1 <- lmer(std_length ~ age + temp_life +  age * method + (1|season), data = bream1, REML = F)
P2b <- lmer(std_length ~ age * temp_life +  age * method + (1|season), data = bream1, REML = F)
anova(P1, P2b)
P3 <- lmer(std_length ~ fage + temp_life +  fage * method + (1|season), data = bream1, REML = F)
P4b <- lmer(std_length ~ fage * temp_life +  fage * method + (1|season), data = bream1, REML = F)
anova(P3, P4b)
plot_model(P2b, type = "pred",
terms = c("temp_life", "age"),
show.data = TRUE,
pred.type = c("fe"),
title = "",
show.legend = TRUE,
jitter = 0.1,
axis.title = c("Average fish life temperature", "Standard length (cm)"),
show.values = FALSE) +
ylim(0, NA) +
theme_bw() +  # Set plot theme to black and white
theme(panel.background = element_rect(fill = "white"),  # Set background color to white
axis.text = element_text(size = 14),  # Increase size of axis text
axis.title = element_text(size = 16),  # Increase size of axis titles
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
plot_model(P4b,
type = "pred",
terms = c("temp_life", "fage"),
show.data = TRUE,
pred.type = c("fe"),
title = "",
show.legend = TRUE,
jitter = 0.1,
axis.title = c("Average fish life temperature", "Standard length (cm)"),
show.values = FALSE) +
theme_bw() +  # Set plot theme to black and white
theme(panel.background = element_rect(fill = "white"),  # Set background color to white
axis.text = element_text(size = 14),  # Increase size of axis text
axis.title = element_text(size = 16),  # Increase size of axis titles
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
rm(list=ls())
rm(list=ls())
library(tidyverse)
library(car)
# library(dplyr)
library(ggplot2)
library(lme4)
# install.packages("sjPlot")
library(sjPlot)
library(GGally)
library(DHARMa)
temp <- read_csv(file = "temp.csv")
size_age_data <- read_csv(file = "size_at_age.csv")
bream <- size_age_data %>% filter (spp_name_lt=="Karsis")
colSums(is.na(bream))
# Creating new column (year1) by subtracting fish age from the year when it was caught. It will show first fish year - the year the fish was born.
bream$year1 <- bream$year - bream$age
# Renaming column to year1 in temp dataset in order to combine it with perch data
names(temp)[names(temp) == "year"] <- "year1"
# Merging perch and temp dataset by year1 - just adding temp column which will show water temperature for first year of fish life
bream <- merge(bream, temp, by = "year1", all.x = TRUE)
# Creating new column for average temperature during all years of fish life
average_temp <- numeric(nrow(bream))
for (i in 1:nrow(bream)) {
years_subset <- temp$temp[temp$year1 >= bream[i, "year1"] & temp$year1 <= bream[i, "year"]]
average_temp[i] <- mean(years_subset, na.rm = TRUE)
}
bream$average_temp <- average_temp
# renaming columns to make it more clear
names(bream)[names(bream) == "temp"] <- "temp_year1"
names(bream)[names(bream) == "average_temp"] <- "temp_life"
tableb1<- bream %>%
group_by(year, method) %>%
summarise(
median_length = median(std_length),
median_age = median(age), count_observation = n())
# scales and otholits data for age groups
tableb2<- bream %>%
group_by(age, method) %>%
summarise(count = n(), .groups = 'drop')  %>%
pivot_wider(names_from = method, values_from = count, values_fill = 0)
colSums(is.na(bream))
table(bream$age)
# removing ages which do not have both methods
bream1 <- bream %>% filter (age > 2 & age <= 16 & age != 5) %>% drop_na (season) %>% filter (std_length<55)
# making one group of ages between 11 to 16 years
bream1 <- bream1 %>%
mutate(age = ifelse(age > 11, 12, age))
table(bream1$year)
bream1 <- bream1 %>% mutate(yearn = year - 1948)
table(bream1$method)
bream1$fage <- as.factor(bream1$age)
ggplot(data = bream1) +
geom_point(mapping = aes(x = age, y = std_length, color=as.factor(year)), position = "jitter", size = 2)
# no outliers
P1 <- lmer(std_length ~ age + temp_life +  age * method + (1|season), data = bream1, REML = F)
P2b <- lmer(std_length ~ age * temp_life +  age * method + (1|season), data = bream1, REML = F)
anova(P1, P2b)
P3 <- lmer(std_length ~ fage + temp_life +  fage * method + (1|season), data = bream1, REML = F)
P4b <- lmer(std_length ~ fage * temp_life +  fage * method + (1|season), data = bream1, REML = F)
anova(P3, P4b)
plot_model(P2b, type = "pred",
terms = c("temp_life", "age"),
show.data = TRUE,
pred.type = c("fe"),
title = "",
show.legend = TRUE,
jitter = 0.1,
axis.title = c("Average fish life temperature", "Standard length (cm)"),
show.values = FALSE) +
ylim(0, NA) +
theme_bw() +  # Set plot theme to black and white
theme(panel.background = element_rect(fill = "white"),  # Set background color to white
axis.text = element_text(size = 14),  # Increase size of axis text
axis.title = element_text(size = 16),  # Increase size of axis titles
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())  # Remove minor grid lines
rm(list=ls())
library(tidyverse)
library(car)
# library(dplyr)
library(ggplot2)
library(lme4)
# install.packages("sjPlot")
library(sjPlot)
library(GGally)
library(DHARMa)
temp <- read_csv(file = "temp.csv")
size_age_data <- read_csv(file = "size_at_age.csv")
bream <- size_age_data %>% filter (spp_name_lt=="Karsis")
colSums(is.na(bream))
# Creating new column (year1) by subtracting fish age from the year when it was caught. It will show first fish year - the year the fish was born.
bream$year1 <- bream$year - bream$age
# Renaming column to year1 in temp dataset in order to combine it with perch data
names(temp)[names(temp) == "year"] <- "year1"
# Merging perch and temp dataset by year1 - just adding temp column which will show water temperature for first year of fish life
bream <- merge(bream, temp, by = "year1", all.x = TRUE)
# Creating new column for average temperature during all years of fish life
average_temp <- numeric(nrow(bream))
for (i in 1:nrow(bream)) {
years_subset <- temp$temp[temp$year1 >= bream[i, "year1"] & temp$year1 <= bream[i, "year"]]
average_temp[i] <- mean(years_subset, na.rm = TRUE)
}
bream$average_temp <- average_temp
# renaming columns to make it more clear
names(bream)[names(bream) == "temp"] <- "temp_year1"
names(bream)[names(bream) == "average_temp"] <- "temp_life"
View(bream)
View(bream)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(dplyr)
library(sjPlot)
library(dplyr)
library(cowplot)
library(Kendall)
library(EnvStats)
L50data <- read_csv(file = "L50_data.csv")
# Selecting only summer data to reduce bias in the analysis caused by the different sizes of fish during different seasons
# L50data <- L50data %>% filter (month == 6 | month == 7 | month == 8) %>% select(spp_name_lt, total_length, gonad_stage, year, month, sex_en)
# function for Counting the length at which 50% of the fish are mature
lrPerc <- function(cf,p) (log(p/(1-p))-cf[[1]])/cf[[2]]
My_theme <- theme(
panel.background = element_blank(),
panel.border = element_rect(fill = NA, linewidth = 1),
strip.background = element_rect(fill = "white", color = "white", linewidth = 1),
text = element_text(size = 20, family = "gillsans"),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)
Bream1 <- L50data %>% filter (spp_name_lt=="Karsis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = Bream1)
summary(model)
cor(Bream1$total_length, Bream1$std_length, use = "complete.obs") # 0.988
# counting total length with regression coefficients and standard length
Bream1$total_length[is.na(Bream1$total_length)] <- 1.656 + (Bream1$std_length[is.na(Bream1$total_length)] * 1.186)
# Adding gonad stage 1 to smallest individuals which total length less than 10 and which has no gonad stage data.
Bream1 <- Bream1 %>% mutate(gonad_stage = ifelse(is.na(gonad_stage) & total_length < 10, "1", gonad_stage), gonad_stage = ifelse(gonad_stage == "2" & total_length > 50, NA, gonad_stage)) %>% drop_na(gonad_stage)
colSums(is.na(Bream1)) #now all data has total length
Bream1 <- Bream1 %>% select(spp_name_lt, total_length, gonad_stage, year, month, sex_en)
Bream1 <- L50data %>% filter (spp_name_lt=="Karsis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = Bream1)
summary(model)
cor(Bream1$total_length, Bream1$std_length, use = "complete.obs") # 0.988
# counting total length with regression coefficients and standard length
Bream1$total_length[is.na(Bream1$total_length)] <- 1.656 + (Bream1$std_length[is.na(Bream1$total_length)] * 1.186)
table(Bream1$gonad_stage)
ggplot(Bream1, aes(x = gonad_stage, y = total_length)) +
geom_point(color = "blue", size = 3) +
labs(title = "Scatterplot of X vs Y",
x = "X-axis Label",
y = "Y-axis Label")
ggplot(Bream1, aes(gonad_stage, total_length, color = as.factor(year))) +
geom_point(size = 3, position = "jitter", alpha = 1/2)
Bream1 <- L50data %>% filter (spp_name_lt=="Karsis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = Bream1)
summary(model)
cor(Bream1$total_length, Bream1$std_length, use = "complete.obs") # 0.988
# counting total length with regression coefficients and standard length
Bream1$total_length[is.na(Bream1$total_length)] <- 1.656 + (Bream1$std_length[is.na(Bream1$total_length)] * 1.186)
# Adding gonad stage 1 to smallest individuals which total length less than 10 and which has no gonad stage data.
Bream1 <- Bream1 %>% mutate(gonad_stage = ifelse(is.na(gonad_stage) & total_length < 10, "1", gonad_stage), gonad_stage = ifelse(gonad_stage == "2" & total_length > 50, NA, gonad_stage)) %>% drop_na(gonad_stage)
colSums(is.na(Bream1)) #now all data has total length
# Adding gonad stage 1 to smallest individuals which total length less than 10 and which has no gonad stage data.
Bream1 <- Bream1 %>% mutate(gonad_stage = ifelse(is.na(gonad_stage) & total_length < 10, "1", gonad_stage), gonad_stage = ifelse(gonad_stage == "2" & total_length > 50, NA, gonad_stage)) %>% drop_na(gonad_stage)
ggplot(Bream1, aes(gonad_stage, total_length, color = as.factor(year))) +
geom_point(size = 3, position = "jitter", alpha = 1/2)
Bream1 <- L50data %>% filter (spp_name_lt=="Karsis")
# fitting linear regression to get coefficients to counts total length where it is missing
model <- lm(total_length ~ std_length, data = Bream1)
summary(model)
cor(Bream1$total_length, Bream1$std_length, use = "complete.obs") # 0.988
# counting total length with regression coefficients and standard length
Bream1$total_length[is.na(Bream1$total_length)] <- 1.656 + (Bream1$std_length[is.na(Bream1$total_length)] * 1.186)
Bream1 <- Bream1 %>% drop_na(gonad_stage)
ggplot(Bream1, aes(gonad_stage, total_length, color = as.factor(year))) +
geom_point(size = 3, position = "jitter", alpha = 1/2)
